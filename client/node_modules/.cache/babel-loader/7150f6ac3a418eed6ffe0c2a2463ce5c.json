{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { GOOGLE_SIGN_IN_START, EMAIL_SIGN_IN_START, CHECK_USER_SESSION } from '../actions/userTypes';\nimport { auth, googleProvider, createUserProfile, getCurrentUser } from '../../config/firebase';\nimport { signInSuccess, signInFailure } from '../actions/users';\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    const userRef = yield call(createUserProfile, user);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (err) {\n    yield put(signInFailure(err));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    const userRef = yield call(createUserProfile, user);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (err) {\n    yield put(signInFailure(err));\n  }\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* isUserAuthenticated() {}\nexport function* onCheckUserSession() {\n  yield takeLatest(CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}","map":{"version":3,"sources":["/home/ad_gutierrez/Desktop/react/complete-react-developer/4-e-commerce/crwn-clothing/src/redux/sagas/userSaga.js"],"names":["takeLatest","put","all","call","GOOGLE_SIGN_IN_START","EMAIL_SIGN_IN_START","CHECK_USER_SESSION","auth","googleProvider","createUserProfile","getCurrentUser","signInSuccess","signInFailure","signInWithGoogle","user","signInWithPopup","userRef","userSnapshot","get","id","data","err","onGoogleSignInStart","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onEmailSignInStart","isUserAuthenticated","onCheckUserSession","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AACA,SACEC,oBADF,EAEEC,mBAFF,EAGEC,kBAHF,QAIO,sBAJP;AAKA,SACEC,IADF,EAEEC,cAFF,EAGEC,iBAHF,EAIEC,cAJF,QAKO,uBALP;AAMA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,kBAA7C;AAEA,OAAO,UAAUC,gBAAV,GAA6B;AAClC,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMP,IAAI,CAACQ,eAAL,CAAqBP,cAArB,CAAvB;AACA,UAAMQ,OAAO,GAAG,MAAMb,IAAI,CAACM,iBAAD,EAAoBK,IAApB,CAA1B;AACA,UAAMG,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMjB,GAAG,CAACU,aAAa,CAAC;AAAEQ,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,SAAGF,YAAY,CAACG,IAAb;AAA1B,KAAD,CAAd,CAAT;AACD,GALD,CAKE,OAAOC,GAAP,EAAY;AACZ,UAAMpB,GAAG,CAACW,aAAa,CAACS,GAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUC,mBAAV,GAAgC;AACrC,QAAMtB,UAAU,CAACI,oBAAD,EAAuBS,gBAAvB,CAAhB;AACD;AAED,OAAO,UAAUU,eAAV,CAA0B;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAA1B,EAA4D;AACjE,MAAI;AACF,UAAM;AAAEZ,MAAAA;AAAF,QAAW,MAAMP,IAAI,CAACoB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;AACA,UAAMV,OAAO,GAAG,MAAMb,IAAI,CAACM,iBAAD,EAAoBK,IAApB,CAA1B;AACA,UAAMG,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMjB,GAAG,CAACU,aAAa,CAAC;AAAEQ,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,SAAGF,YAAY,CAACG,IAAb;AAA1B,KAAD,CAAd,CAAT;AACD,GALD,CAKE,OAAOC,GAAP,EAAY;AACZ,UAAMpB,GAAG,CAACW,aAAa,CAACS,GAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUO,kBAAV,GAA+B;AACpC,QAAM5B,UAAU,CAACK,mBAAD,EAAsBkB,eAAtB,CAAhB;AACD;AAED,OAAO,UAAUM,mBAAV,GAAgC,CAAE;AAEzC,OAAO,UAAUC,kBAAV,GAA+B;AACpC,QAAM9B,UAAU,CAACM,kBAAD,EAAqBuB,mBAArB,CAAhB;AACD;AAED,OAAO,UAAUE,SAAV,GAAsB;AAC3B,QAAM7B,GAAG,CAAC,CAACC,IAAI,CAACmB,mBAAD,CAAL,EAA4BnB,IAAI,CAACyB,kBAAD,CAAhC,CAAD,CAAT;AACD","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport {\n  GOOGLE_SIGN_IN_START,\n  EMAIL_SIGN_IN_START,\n  CHECK_USER_SESSION\n} from '../actions/userTypes';\nimport {\n  auth,\n  googleProvider,\n  createUserProfile,\n  getCurrentUser\n} from '../../config/firebase';\nimport { signInSuccess, signInFailure } from '../actions/users';\n\nexport function* signInWithGoogle() {\n  try {\n    const { user } = yield auth.signInWithPopup(googleProvider);\n    const userRef = yield call(createUserProfile, user);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\n  } catch (err) {\n    yield put(signInFailure(err));\n  }\n}\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\nexport function* signInWithEmail({ payload: { email, password } }) {\n  try {\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\n    const userRef = yield call(createUserProfile, user);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\n  } catch (err) {\n    yield put(signInFailure(err));\n  }\n}\n\nexport function* onEmailSignInStart() {\n  yield takeLatest(EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\nexport function* isUserAuthenticated() {}\n\nexport function* onCheckUserSession() {\n  yield takeLatest(CHECK_USER_SESSION, isUserAuthenticated);\n}\n\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}\n"]},"metadata":{},"sourceType":"module"}